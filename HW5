\documentclass[12pt,letterpaper]{article}
\usepackage{fullpage}
\usepackage[top=2cm, bottom=4.5cm, left=2.5cm, right=2.5cm]{geometry}
\usepackage{amsmath,amsthm,amsfonts,amssymb,amscd}
\usepackage{lastpage}
\usepackage{enumerate}
\usepackage{fancyhdr}
\usepackage{mathrsfs}
\usepackage{xcolor}
\usepackage{graphicx}
\usepackage{listings}
\usepackage{hyperref}
\usepackage{multicol}

\usepackage{enumitem}


\hypersetup{%
  colorlinks=true,
  linkcolor=blue,
  urlcolor=cyan,
  linkbordercolor={0 0 1}
}
 
\renewcommand\lstlistingname{Algorithm}
\renewcommand\lstlistlistingname{Algorithms}
\def\lstlistingautorefname{Alg.}

\lstdefinestyle{Python}{
    language        = Python,
    frame           = lines, 
    basicstyle      = \footnotesize,
    keywordstyle    = \color{blue},
    stringstyle     = \color{green},
    commentstyle    = \color{red}\ttfamily
}

\setlength{\parindent}{0.0in}
\setlength{\parskip}{0.05in}

% Edit these as appropriate
\newcommand\course{PHYS 243}
\newcommand\hwnumber{5}                  % <-- homework number
\newcommand\MyName{Dominique Acuna}           % <-- My name

\pagestyle{fancyplain}
\headheight 35pt
\lhead{\MyName}

\chead{\textbf{\Large Homework \hwnumber}}
\rhead{\course \\ Deadline:  08/16/2019, 11:59 pm}
\lfoot{}
\cfoot{}
\rfoot{\small\thepage}
\headsep 1.5em

\begin{document}
\section*{Find the income using Support Vector Machines!}
From the link to \href{https://abtinshahidi.github.io/files/adult.zip}{adult.zip} download the data set. First, take a look at the data. You can see that the data contains categorical data as well. First of run a \textbf{random forests} and \textbf{measure your performance}. 

import numpy as np
import random
import matplotlib.pyplot as plt

# use LaTeX fonts in the plot
plt.rc('text', usetex=True)

# ticks settings
plt.rc('xtick',labelsize=10)
plt.rc('ytick',labelsize=10)

# axes setting
plt.rc('axes', titlesize=22, labelsize=18)     # fontsize of the axes title, labels

# Set the font parameters
plt.rc('font', **font)

# Set the figure parameters
plt.rc("figure", **figure)


adult_data = "H:\Tuition Assistance&Masters\UCR\PHY243\adult.zip\adult.data"

attr_names = ["Age", "WorkClass", "Fnlwgt", "Education", "Education-Num", "Martial-Status", "Occupation", "Protective-syerv", "Relationship", "Race", "Sex", "Capital-Gain", "Capital-Loss", "Hours-per-Week", "Native-Countr", "Prediciton"]

AD_dataset = Data_Set(name = "Adult dataset",
                      target_attribute=15,
                      attribute_names=attr_names,
                      file_info=(adult_data, None, ","))

tree_AD = Decision_Tree_Learner(AD_dataset)

tree_AD.display_out()
'''

Test inv-nodes
 inv-nodes = 0-2 ---> Test tumor-size
      tumor-size = 30-34 ---> Test deg-malig
           deg-malig = 1.0 ---> Test Class
                Class = recurrence-events ---> Test Age
                     Age = 20-29 ---> RESULT = yes
                     Age = 70-79 ---> RESULT = no
                     Age = 50-59 ---> RESULT = yes
                     Age = 40-49 ---> RESULT = yes
                     Age = 60-69 ---> RESULT = yes
                     Age = 30-39 ---> RESULT = no

                Class = no-recurrence-events ---> RESULT = no

           deg-malig = 2.0 ---> Test breast-quad
                breast-quad = central ---> RESULT = no
                breast-quad = right_low ---> RESULT = no
                breast-quad = left_up ---> Test Age
                     Age = 20-29 ---> RESULT = no
                     Age = 70-79 ---> RESULT = no
                     Age = 50-59 ---> RESULT = no
                     Age = 40-49 ---> RESULT = yes
                     Age = 60-69 ---> RESULT = no
                     Age = 30-39 ---> RESULT = no

                breast-quad = ? ---> RESULT = no
                breast-quad = left_low ---> Test Menopause
                     Menopause = ge40 ---> Test Class
                          Class = recurrence-events ---> RESULT = yes
                          Class = no-recurrence-events ---> Test breast
                               breast = left ---> Test Age
                                    Age = 20-29 ---> RESULT = no
                                    Age = 70-79 ---> RESULT = no
                                    Age = 50-59 ---> RESULT = no
                                    Age = 40-49 ---> RESULT = yes
                                    Age = 60-69 ---> Test node-caps
                                         node-caps = no ---> RESULT = yes
                                         node-caps = yes ---> RESULT = no
                                         node-caps = ? ---> RESULT = yes

                                    Age = 30-39 ---> RESULT = yes

                               breast = right ---> RESULT = no


                     Menopause = premeno ---> RESULT = no
                     Menopause = lt40 ---> RESULT = yes

                breast-quad = right_up ---> RESULT = yes

           deg-malig = 3.0 ---> Test breast-quad
                breast-quad = central ---> RESULT = no
                breast-quad = right_low ---> RESULT = no
                breast-quad = left_up ---> Test Class
                     Class = recurrence-events ---> RESULT = yes
                     Class = no-recurrence-events ---> RESULT = no

                breast-quad = ? ---> RESULT = no
                breast-quad = left_low ---> RESULT = no
                breast-quad = right_up ---> RESULT = no


      tumor-size = 35-39 ---> Test node-caps
           node-caps = no ---> RESULT = no
           node-caps = yes ---> RESULT = yes
           node-caps = ? ---> RESULT = no

      tumor-size = 50-54 ---> Test breast
           breast = left ---> RESULT = no
           breast = right ---> Test deg-malig
                deg-malig = 1.0 ---> RESULT = no
                deg-malig = 2.0 ---> RESULT = yes
                deg-malig = 3.0 ---> RESULT = no


      tumor-size = 25-29 ---> Test Age
           Age = 20-29 ---> RESULT = no
           Age = 70-79 ---> RESULT = no
           Age = 50-59 ---> Test deg-malig
                deg-malig = 1.0 ---> RESULT = no
                deg-malig = 2.0 ---> RESULT = no
                deg-malig = 3.0 ---> Test breast
                     breast = left ---> RESULT = no
                     breast = right ---> RESULT = yes


           Age = 40-49 ---> Test node-caps
                node-caps = no ---> Test breast-quad
                     breast-quad = central ---> RESULT = no
                     breast-quad = right_low ---> RESULT = no
                     breast-quad = left_up ---> Test Class
                          Class = recurrence-events ---> RESULT = no
                          Class = no-recurrence-events ---> Test deg-malig
                               deg-malig = 1.0 ---> RESULT = yes
                               deg-malig = 2.0 ---> Test breast
                                    breast = left ---> Test Menopause
                                         Menopause = ge40 ---> RESULT = yes
                                         Menopause = premeno ---> RESULT = no
                                         Menopause = lt40 ---> RESULT = no

                                    breast = right ---> RESULT = no

                               deg-malig = 3.0 ---> RESULT = yes


                     breast-quad = ? ---> RESULT = no
                     breast-quad = left_low ---> Test deg-malig
                          deg-malig = 1.0 ---> RESULT = yes
                          deg-malig = 2.0 ---> Test breast
                               breast = left ---> Test Menopause
                                    Menopause = ge40 ---> RESULT = no
                                    Menopause = premeno ---> RESULT = yes
                                    Menopause = lt40 ---> RESULT = yes

                               breast = right ---> RESULT = no

                          deg-malig = 3.0 ---> RESULT = no

                     breast-quad = right_up ---> RESULT = no

                node-caps = yes ---> RESULT = no
                node-caps = ? ---> RESULT = yes

           Age = 60-69 ---> Test breast-quad
                breast-quad = central ---> RESULT = no
                breast-quad = right_low ---> RESULT = yes
                breast-quad = left_up ---> RESULT = no
                breast-quad = ? ---> RESULT = no
                breast-quad = left_low ---> RESULT = no
                breast-quad = right_up ---> RESULT = no

           Age = 30-39 ---> RESULT = no

      tumor-size = 15-19 ---> Test breast-quad
           breast-quad = central ---> Test node-caps
                node-caps = no ---> RESULT = no
                node-caps = yes ---> RESULT = yes
                node-caps = ? ---> RESULT = no

           breast-quad = right_low ---> RESULT = no
           breast-quad = left_up ---> Test Menopause
                Menopause = ge40 ---> Test deg-malig
                     deg-malig = 1.0 ---> RESULT = no
                     deg-malig = 2.0 ---> Test breast
                          breast = left ---> RESULT = yes
                          breast = right ---> RESULT = no

                     deg-malig = 3.0 ---> RESULT = yes

                Menopause = premeno ---> RESULT = no
                Menopause = lt40 ---> RESULT = no

           breast-quad = ? ---> RESULT = no
           breast-quad = left_low ---> RESULT = no
           breast-quad = right_up ---> RESULT = no

      tumor-size = 20-24 ---> Test deg-malig
           deg-malig = 1.0 ---> RESULT = no
           deg-malig = 2.0 ---> RESULT = no
           deg-malig = 3.0 ---> Test Menopause
                Menopause = ge40 ---> RESULT = no
                Menopause = premeno ---> Test breast-quad
                     breast-quad = central ---> RESULT = no
                     breast-quad = right_low ---> RESULT = yes
                     breast-quad = left_up ---> RESULT = yes
                     breast-quad = ? ---> RESULT = yes
                     breast-quad = left_low ---> RESULT = yes
                     breast-quad = right_up ---> RESULT = yes

                Menopause = lt40 ---> RESULT = no


      tumor-size = 5-9 ---> Test breast-quad
           breast-quad = central ---> RESULT = no
           breast-quad = right_low ---> RESULT = no
           breast-quad = left_up ---> RESULT = no
           breast-quad = ? ---> RESULT = no
           breast-quad = left_low ---> RESULT = yes
           breast-quad = right_up ---> RESULT = no

      tumor-size = 40-44 ---> Test Age
           Age = 20-29 ---> RESULT = no
           Age = 70-79 ---> RESULT = no
           Age = 50-59 ---> RESULT = no
           Age = 40-49 ---> RESULT = no
           Age = 60-69 ---> RESULT = no
           Age = 30-39 ---> Test breast-quad
                breast-quad = central ---> RESULT = no
                breast-quad = right_low ---> RESULT = no
                breast-quad = left_up ---> RESULT = no
                breast-quad = ? ---> RESULT = no
                breast-quad = left_low ---> RESULT = yes
                breast-quad = right_up ---> RESULT = no


      tumor-size = 45-49 ---> RESULT = yes
      tumor-size = 10-14 ---> Test deg-malig
           deg-malig = 1.0 ---> RESULT = no
           deg-malig = 2.0 ---> Test Age
                Age = 20-29 ---> RESULT = no
                Age = 70-79 ---> RESULT = no
                Age = 50-59 ---> RESULT = no
                Age = 40-49 ---> Test breast
                     breast = left ---> Test breast-quad
                          breast-quad = central ---> RESULT = no
                          breast-quad = right_low ---> RESULT = no
                          breast-quad = left_up ---> RESULT = no
                          breast-quad = ? ---> RESULT = no
                          breast-quad = left_low ---> Test Menopause
                               Menopause = ge40 ---> RESULT = no
                               Menopause = premeno ---> Test node-caps
                                    node-caps = no ---> Test Class
                                         Class = recurrence-events ---> RESULT = yes
                                         Class = no-recurrence-events ---> RESULT = no

                                    node-caps = yes ---> RESULT = yes
                                    node-caps = ? ---> RESULT = no

                               Menopause = lt40 ---> RESULT = yes

                          breast-quad = right_up ---> RESULT = no

                     breast = right ---> RESULT = no

                Age = 60-69 ---> Test breast
                     breast = left ---> RESULT = no
                     breast = right ---> RESULT = yes

                Age = 30-39 ---> RESULT = no

           deg-malig = 3.0 ---> RESULT = no

      tumor-size = 0-4 ---> RESULT = no

 inv-nodes = 3-5 ---> Test tumor-size
      tumor-size = 30-34 ---> Test Age
           Age = 20-29 ---> RESULT = no
           Age = 70-79 ---> RESULT = no
           Age = 50-59 ---> Test Menopause
                Menopause = ge40 ---> RESULT = no
                Menopause = premeno ---> RESULT = yes
                Menopause = lt40 ---> RESULT = no

           Age = 40-49 ---> RESULT = no
           Age = 60-69 ---> Test breast-quad
                breast-quad = central ---> RESULT = yes
                breast-quad = right_low ---> RESULT = yes
                breast-quad = left_up ---> RESULT = yes
                breast-quad = ? ---> RESULT = yes
                breast-quad = left_low ---> RESULT = no
                breast-quad = right_up ---> RESULT = no

           Age = 30-39 ---> RESULT = yes

      tumor-size = 35-39 ---> RESULT = no
      tumor-size = 50-54 ---> RESULT = no
      tumor-size = 25-29 ---> Test breast-quad
           breast-quad = central ---> RESULT = yes
           breast-quad = right_low ---> RESULT = yes
           breast-quad = left_up ---> Test node-caps
                node-caps = no ---> RESULT = yes
                node-caps = yes ---> RESULT = no
                node-caps = ? ---> RESULT = yes

           breast-quad = ? ---> RESULT = yes
           breast-quad = left_low ---> RESULT = yes
           breast-quad = right_up ---> RESULT = no

      tumor-size = 15-19 ---> RESULT = no
      tumor-size = 20-24 ---> Test Age
           Age = 20-29 ---> RESULT = no
           Age = 70-79 ---> RESULT = no
           Age = 50-59 ---> RESULT = no
           Age = 40-49 ---> Test Class
                Class = recurrence-events ---> RESULT = yes
                Class = no-recurrence-events ---> RESULT = no

           Age = 60-69 ---> RESULT = yes
           Age = 30-39 ---> Test breast-quad
                breast-quad = central ---> RESULT = no
                breast-quad = right_low ---> RESULT = no
                breast-quad = left_up ---> RESULT = yes
                breast-quad = ? ---> RESULT = no
                breast-quad = left_low ---> RESULT = no
                breast-quad = right_up ---> RESULT = no


      tumor-size = 5-9 ---> RESULT = no
      tumor-size = 40-44 ---> Test breast-quad
           breast-quad = central ---> RESULT = yes
           breast-quad = right_low ---> RESULT = yes
           breast-quad = left_up ---> RESULT = yes
           breast-quad = ? ---> RESULT = yes
           breast-quad = left_low ---> RESULT = no
           breast-quad = right_up ---> RESULT = yes

      tumor-size = 45-49 ---> RESULT = no
      tumor-size = 10-14 ---> RESULT = no
      tumor-size = 0-4 ---> RESULT = no

 inv-nodes = 12-14 ---> RESULT = yes
 inv-nodes = 9-11 ---> Test tumor-size
      tumor-size = 30-34 ---> RESULT = yes
      tumor-size = 35-39 ---> Test breast
           breast = left ---> RESULT = no
           breast = right ---> RESULT = yes

      tumor-size = 50-54 ---> RESULT = no
      tumor-size = 25-29 ---> RESULT = no
      tumor-size = 15-19 ---> RESULT = yes
      tumor-size = 20-24 ---> RESULT = yes
      tumor-size = 5-9 ---> RESULT = yes
      tumor-size = 40-44 ---> RESULT = yes
      tumor-size = 45-49 ---> RESULT = yes
      tumor-size = 10-14 ---> RESULT = yes
      tumor-size = 0-4 ---> RESULT = yes

 inv-nodes = 6-8 ---> Test tumor-size
      tumor-size = 30-34 ---> Test breast-quad
           breast-quad = central ---> RESULT = no
           breast-quad = right_low ---> Test deg-malig
                deg-malig = 1.0 ---> RESULT = no
                deg-malig = 2.0 ---> RESULT = yes
                deg-malig = 3.0 ---> RESULT = no

           breast-quad = left_up ---> RESULT = no
           breast-quad = ? ---> RESULT = no
           breast-quad = left_low ---> RESULT = no
           breast-quad = right_up ---> RESULT = no

      tumor-size = 35-39 ---> RESULT = no
      tumor-size = 50-54 ---> RESULT = yes
      tumor-size = 25-29 ---> RESULT = yes
      tumor-size = 15-19 ---> RESULT = yes
      tumor-size = 20-24 ---> RESULT = yes
      tumor-size = 5-9 ---> RESULT = yes
      tumor-size = 40-44 ---> RESULT = yes
      tumor-size = 45-49 ---> RESULT = no
      tumor-size = 10-14 ---> RESULT = yes
      tumor-size = 0-4 ---> RESULT = yes

 inv-nodes = 15-17 ---> Test deg-malig
      deg-malig = 1.0 ---> RESULT = no
      deg-malig = 2.0 ---> RESULT = yes
      deg-malig = 3.0 ---> RESULT = no
      '''

 inv-nodes = 24-26 ---> RESULT = yes
AD_Train, AD_test =AD_dataset.train_test_split(test_fraction=0.2, Seed=90)
RF_AD = Random_Forest(AD_Train, n = 100)
def Measure_accuracy(true_values, predictions):
    _sum_ = 0
    for truth, prediction in zip(true_values, predictions):
        if truth==prediction:
            _sum_+=1
    return _sum_/len(predictions)
rf_predictions = [RF_AD(a[:-1]) for a in AD_test.examples]
true_Test_values = [example[AD_test.target_attribute] for example in AD_test.examples]

Measure_accuracy(true_Test_values, rf_predictions)

def plot_the_accuracy(train_set, test_set, list_of_tree_num = np.arange(10, 100, 10)):
    accuracy =[]
    for n in list_of_tree_num:
        RF_AD = Random_Forest(train_set, n=n)
        _predictions = [RF_AD(a[:-1]) for a in test_set.examples]
        _true_values = [example[test_set.target_attribute] for example in test_set.examples]
        accuracy.append(Measure_accuracy(_true_values, _predictions))

    fig = plt.plot(list_of_tree_num, accuracy)
    return fig, accuracy

acc, fig = plot_the_accuracy(AD_Train, AD_test, list(range(5, 60)))

plt.title(r"Accuracy for Random Forests predctions", fontsize=15)
plt.xlabel(r"Number of trees", fontsize=12)
plt.ylabel(r"Accuracy", fontsize=12)
Text(0, 0.5, 'Accuracy')


\subsection*{Transform Categorical data into numbers!}
 Now that we have more complicated algorithm, let's make use out of them. But first you should change your categorical data into real valued number which are needed for the SVM algorithm. Come up with a method that can do this translation. 


# https://www.datacamp.com/community/tutorials/categorical-data


'''
Label Encoding
Another approach is to encode categorical values with a technique called "label encoding", which allows you to convert 
each value in a column to a number. Numerical labels are always between 0 and n_categories-1.

You can do label encoding via attributes .cat.codes on your DataFrame's column.

cat_df_flights_lc['carrier'] = cat_df_flights_lc['carrier'].cat.codes
cat_df_flights_lc.head() #alphabetically labeled from 0 to 10

'''


\subsection*{Scale your attributes!}
 Now that you have numerical attributes, scale all your features to something reasonable.
 
 #standardize the data attributes for the Iris datasetPython
# Standardize the data attributes for the Iris dataset.
from sklearn.datasets import load_iris
from sklearn import preprocessing
# load the Iris dataset
iris = load_iris()
print(iris.data.shape)
# separate the data and target attributes
X = iris.data
y = iris.target
# standardize the data attributes
standardized_X = preprocessing.scale(X)

# Standardize the data attributes for the Iris dataset.
from sklearn.datasets import load_iris
from sklearn import preprocessing
# load the Iris dataset
iris = load_iris()
print(iris.data.shape)
# separate the data and target attributes
X = iris.data
y = iris.target
# standardize the data attributes
standardized_X = preprocessing.scale(X)

\subsection*{Run Support Vector Machine!}
Now that you preprocessed your data, you can run the algorithm and measure your performance. Compare your results to the random forest performance on the same task.
from sklearn import svm
def _plot_skitlearn_svm(kernel = "linear", gamma=0.1, degree=2, coef=0):
    svm_classifier = svm.SVC(kernel=kernel, gamma=gamma, degree=degree, coef0 = coef)
    X = examples[:,:-1]
    y = examples[:,-1]
    svm_classifier.fit(X, y)

    # plot the predictions
    x = np.linspace(-1, 2.5, 80)
    y = np.linspace(-1, 2.5, 80)
    x, y = np.meshgrid(x, y)

    x = x.ravel()
    y = y.ravel()

    X_testing = np.c_[x, y]

    predictions = svm_classifier.predict(X_testing)

    colors = []

    for i in predictions:
        if i==1:
            colors.append("r")
        else:
            colors.append("b")

    np.random.seed(20)

    x1 = 1.2 + 0.5 * np.random.randn(20)
    y1 = 1.5 + 0.2 * np.random.randn(20)

    x2 = 0 + 0.3 * np.random.randn(20)
    y2 = 0 + 0.4 * np.random.randn(20)


    fig = plt.scatter(x, y, c=colors, s = 0.5)

    plt.plot(x1, y1, "r.", markersize=10)
    plt.plot(x2, y2, "b.", markersize=10)
    return fig
plt.figure(figsize=(17, 4))


kernels = ["linear", "rbf", "poly", "sigmoid"]

counter = 141

for kernel in kernels:
    plt.subplot(counter); _plot_skitlearn_svm(kernel=kernel); plt.title(r"SVM with {} kernel".format(kernel), fontsize =12)
    counter+=1


\end{document}

