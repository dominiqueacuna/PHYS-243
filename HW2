\documentclass[12pt,letterpaper]{article}
\usepackage{fullpage}
\usepackage[top=2cm, bottom=4.5cm, left=2.5cm, right=2.5cm]{geometry}
\usepackage{amsmath,amsthm,amsfonts,amssymb,amscd}
\usepackage{lastpage}
\usepackage{enumerate}
\usepackage{fancyhdr}
\usepackage{mathrsfs}
\usepackage{xcolor}
\usepackage{graphicx}
\usepackage{listings}
\usepackage{hyperref}

\hypersetup{%
  colorlinks=true,
  linkcolor=blue,
  linkbordercolor={0 0 1}
}
 
\renewcommand\lstlistingname{Algorithm}
\renewcommand\lstlistlistingname{Algorithms}
\def\lstlistingautorefname{Alg.}

\lstdefinestyle{Python}{
    language        = Python,
    frame           = lines, 
    basicstyle      = \footnotesize,
    keywordstyle    = \color{blue},
    stringstyle     = \color{green},
    commentstyle    = \color{red}\ttfamily
}

\setlength{\parindent}{0.0in}
\setlength{\parskip}{0.05in}

% Edit these as appropriate
\newcommand\course{PHYS 243}
\newcommand\hwnumber{2}                  % <-- homework number
\newcommand\MyName{Dominique Acuna}           % <-- My name

\pagestyle{fancyplain}
\headheight 35pt
\lhead{\MyName}

\chead{\textbf{\Large Homework \hwnumber}}
\rhead{\course \\ Deadline:  July 14, 2019, 11:59 pm}
\lfoot{}
\cfoot{}
\rfoot{\small\thepage}
\headsep 1.5em

\begin{document}
\section*{Problem 1: Find the distribution!}
These are the data-set for the number of car accidents in the rush hour of a small city. You are assigned to predict the \textbf{number of car accidents in a given hour of the day}. You need to find the full probability distribution of this quantity. 
\\

Also, make sure to clearly \textbf{state the assumptions} you are making at each step.

\begin{table}[htp]
\centering
\begin{tabular}{|l|l|l|l|l|l|l|l|l|l|l|}
\hline
16 & 24 & 16 & 12 & 16 & 11 & 14 & 15 & 9 & 14 & 7 \\ \hline
\end{tabular}
\caption{The Number of Accident during rush hour}
\end{table}


\textit{\textbf{Tip:} You can/should make reasonable assumption about the data.} 
#Assumptions:
#Probability of getting in an accident is p. Probability of not getting in an accient is q=1-p
#Assume day of week does not matter-Data is independent 
#No info about prior distribution so assume Uniform
data_array = [16, 24, 16, 12, 16, 11, 14, 15, 9, 14, 7]

import numpy as np
import matplotlib.pyplot as plt

plt.rc('text', usetex=True)
plt.rc('font', family='serif')
def binomial(n=0, N=1, p=1):
    """
    This is the probability mass function for the binomial distribution.

    INPUT:
            n: Number of desired outcome
            N: Number of trials
            p: Probability of a desired outcome for each separate hour

    OUTPUT:
            Probability of getting n desired outcome, out of N trials,
            when the probability of desired outcome is p
    """
    from math import factorial
    factor = factorial(N)/(factorial(n)*factorial(N-n))
    return factor*(p**n)*(1-p)**(N-n)
number_of_points = 10**5
prior_p = np.linspace(0,1, number_of_points)
from time import time

vec_binomial = np.vectorize(binomial)

N = 24

prob_p_cat=np.zeros(number_of_points)

ti=time()
for i,p in enumerate(prior_p):
    prob_p_cat[i] = np.prod(vec_binomial(data_array, N, p))
tf=time()-ti


print("numpy.vectorize method for {} data points and {} simulations (sampling p) takes: {:10.3f} seconds ".format(len(data_array), number_of_points, tf))
prior_p[prob_p_cat==max(prob_p_cat)]


fig_p = plt.figure(figsize=(8,8))

# Just normalizing the probability to maximum value so most likely
# value corresponds to 1.
# For getting the through probability we need to find the Integral
# of the un-normalized distribution.

plt.plot(prior_p, prob_p_cat/max(prob_p_cat),  markersize=1)

plt.title(r"\textbf{Probability distribution of fairness measure($p$)}", fontsize=20)

plt.xlabel(r"Getting into an Accident: $p$", fontsize=18)
plt.ylabel(r"Aribitrary Normalized Probability", fontsize=18)


plt.show()


\section*{Problem 2: Find the parameters!}
Write a python function to find $\mu$ and $\sigma$:
\begin{equation*}
N(x|\mu,\sigma)=N(x|\mu_1,\sigma_1)N(x|\mu_2,\sigma_2)...N(x|\mu_N,\sigma_N)
\end{equation*}

In which $N$ is a Normal distribution:
\begin{equation*}
N(x|\mu,\sigma)=\frac{1}{\sqrt{2\pi \sigma^2}}\exp(-\frac{(x-\mu)^2}{2\sigma^2})
\end{equation*}

Your function should take two vectors: 
\begin{equation*}
\begin{array}[1]
2 \vec{\mu} \textrm{\texttt{= numpy.array}}[\mu_1, \mu_2, ..., \mu_N] \\
 \vec{\sigma} \textrm{\texttt{= numpy.array}}[\sigma_1, \sigma_2, ...,\sigma_N]
\end{array}
\end{equation*}

And return $\mu$ and $\sigma$.

from scipy.stats import norm 

print(norm.mean(), norm.std())

\end{document}
